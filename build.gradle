buildscript {
	ext {
		grpcVersion = '1.9.0'
		kotlinVersion = '1.2.31'
		springBootVersion = '2.0.1.RELEASE'
		protocVersion = '3.2.0'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

mainClassName = "com.example.demo.DemoApplicationKt"

repositories {
	mavenCentral()
	jcenter()
}

configurations {
	ktlint
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	compile('mysql:mysql-connector-java')

	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	compile('org.lognet:grpc-spring-boot-starter:2.2.0')
	compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+")
	testCompile('org.springframework.boot:spring-boot-starter-test')

	//grpc
	compile "io.grpc:grpc-netty:$grpcVersion"
	compile "io.grpc:grpc-protobuf:$grpcVersion"
	compile "io.grpc:grpc-stub:$grpcVersion"

	compile "com.google.api.grpc:googleapis-common-protos:0.0.3"

	//ktlint
	ktlint "com.github.shyiko:ktlint:0.20.0"
}

sourceSets {
	main {
		proto {
			srcDir '/src/main/proto'
		}
	}
}

protobuf {

	generatedFilesBaseDir = "$projectDir/src/"

	protoc {
		artifact = "com.google.protobuf:protoc:$protocVersion"
	}

	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
		}
	}

	generateProtoTasks {
		ofSourceSet('main').each { task ->
			task.builtins {
				java {
					outputSubDir = 'java'
				}
			}
			task.plugins {
				grpc {
					outputSubDir = 'java'
				}
			}
		}
	}
}

idea {
	module {
		sourceDirs += file("${projectDir}/src/kotlin")
		sourceDirs += file("${projectDir}/src/java")

		inheritOutputDirs = false
		outputDir = file("$buildDir/classes/main/")
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.4.1"
}

task cleanProtoGen{
	doFirst{
		delete("$projectDir/src/main/java")
	}
}
clean.dependsOn cleanProtoGen

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	main = "com.github.shyiko.ktlint.Main"
	classpath = configurations.ktlint
	args "src/**/*.kt"
	// to generate report in checkstyle format prepend following args:
	// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
	// see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	main = "com.github.shyiko.ktlint.Main"
	classpath = configurations.ktlint
	args "-F", "src/**/*.kt"
}